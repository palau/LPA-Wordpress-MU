<?php

/*-----------------------------------------------------------------------------------

TABLE OF CONTENTS

- woo_image - Get Image from custom field
- woo_get_embed - Get Video
- Woo Show Page Menu
- Get the style path currently selected
- Get page ID
- Short Codes
- Tidy up the image source url
- Show image in RSS feed
- Show analytics code footer
- Browser detection body_class() output
- Twitter's Blogger.js output for Twitter widgets
- Show Debug Outputs
- Template Detector
- Framework Updater
-- WooFramework Update Page  
-- WooFramework Update Head
-- WooFramework Version Getter
- Woo URL shortener
- woo_title()
- woo_meta()
- Woo Text Trimmer

-----------------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------------*/
/* woo_image - Get Image from custom field  */
/*-----------------------------------------------------------------------------------*/

/*
This function gets the custom field image and uses thumb.php to resize it
Parameters: 
        $key = Custom field key eg. "image"
        $width = Set width manually without using $type
        $height = Set height manually without using $type
        $class = CSS class to use on the img tag eg. "alignleft". Default is "thumbnail"
        $quality = Enter a quality between 80-100. Default is 90
        $id = Assign a custom ID, if alternative is required.
        $link = Echo with image links ('src') or just echo as image ('img').
        $repeat = Auto Img Function. Adjust amount of images to return for the post attachments.
        $offset = Auto Img Function. Offset the $repeat with assigned amount of objects.
        $before = Auto Img Function. Add Syntax before image output.
        $after = Auto Img Function. Add Syntax after image output.
        $single = Auto Img Function Only. Forces "img" return on images, like on single.php template
        $force = Force smaller images to not be effected with image width and height dimentions (proportions fix)
        $return = Return results instead of echoing out.
		$src = A parameter that accepts a img url for resizing. (No anchor)
		$auto_meta = Disables meta generated by the post_id. When src is used, this setting is automatically set to false.
		$meta = Add a custom meta text to the image and anchor of the image.
*/

function woo_image($args) {
	global $post;
	
	//Defaults
	$key = 'image';
	$width = null;
	$height = null;
	$class = '';
	$quality = 90;
	$id = null;
	$link = 'src';
	$repeat = 1;
	$offset = 0;
	$before = '';
	$after = '';
	$single = false;
	$force = false;
	$return = false;
	$is_auto_image = false;
	$src = '';
	$auto_meta = true;
	$meta = '';
	
	$alt = 'alt=""';
	$img_link = '';
	
	$attachment_id = array();
	$attachment_src = array();
	$thumb_id = get_post_meta($post->ID,'_thumbnail_id',true);
	
	if ( !is_array($args) ) 
		parse_str( $args, $args );
	
	extract($args);
	
    if ( empty($id) ) {
		$id = $post->ID;
    }

	if ( $src != '' ) { // When a custom image is sent through
		$custom_field = $src;
		$link = 'img';
		$auto_meta = false;
	} else if(get_option('woo_post_image_support') == 'true' AND !empty($thumb_id)){
	
		if(is_singular() && $single == false){
			$img_link = get_the_post_thumbnail($id,'single-post-thumbnail',array('class' => 'woo-image ' . $class));	
		} else if(is_singular() && $single == true){
			$img_link = get_the_post_thumbnail($id,array($width,NULL),array('class' => 'woo-image ' . $class));
		} else {
			if(!empty($width)){
				$img_link = get_the_post_thumbnail($id,array($width,NULL),array('class' => 'woo-image ' . $class));
			} else {
				$img_link = get_the_post_thumbnail($id,array(),array('class' => 'woo-image ' . $class));
			}
		}
		//return;
	
	} 
	else {
    	$custom_field = get_post_meta($id, $key, true);
	} 

	if ( empty($custom_field) && get_option('woo_auto_img') == 'true' && empty($img_link)) { // Get the image from post attachments
        
        if( $offset >= 1 ) 
			$repeat = $repeat + $offset;
    
        $attachments = get_children( array(	'post_parent' => $id,
											'numberposts' => $repeat,
											'post_type' => 'attachment',
											'post_mime_type' => 'image',
											'order' => 'DESC', 
											'orderby' => 'menu_order date')
											);

		if ( !empty($attachments) ) { // Search for and get the post attachment
       
			$counter = -1;
			$size = 'large';
			foreach ( $attachments as $att_id => $attachment ) {            
				$counter++;
				if ( $counter < $offset ) 
					continue;
			
				$src = wp_get_attachment_image_src($att_id, $size, true);
				$custom_field = $src[0];
				$is_auto_image = true;
				$attachment_id[] = $att_id;
				$src_arr[] = $custom_field;
			}

		} else { // Get the first img tag from content

			$first_img = '';
			$post = get_post($id); 
			ob_start();
			ob_end_clean();
			$output = preg_match_all('/<img.+src=[\'"]([^\'"]+)[\'"].*>/i', $post->post_content, $matches);
			if ( !empty($matches[1][0]) )
				$custom_field = $matches[1][0];

		}
		
	} 
	
	// Return if there is no attachment or custom field set
	if ( empty($custom_field) && empty($img_link)) 
       return;
	
	if(empty($src_arr) && empty($img_link)){ $src_arr[] = $custom_field; }
	
    $output = '';

	// Get standard sizes
	if ( !$width && !$height ) {
		$width = '100';
		$height = '100';
	}
	
    $set_width = ' width="' . $width .'" ';
    $set_height = ' height="' . $height .'" '; 
    
    if($height == null OR $height == '')
        $set_height = '';
		
	// Set standard class
	if ( $class )
		$class = 'woo-image ' . $class;
	else 
		$class = 'woo-image';

	// Do check to verify if images are smaller then specified.
	$force_all = get_option('woo_force_all');
	$force_single = get_option('woo_force_single');
	if($force == true OR $force_all == true OR ($force_single == true AND is_single())){  
		$set_width = '';
		$set_height = '';
	}
	// WordPress's the_post_thumbnail
	if(!empty($img_link)){
	
				
		if( $link == 'img' ) {  // Just output the image
			$output .= $before; 
			$output .= $img_link;
			$output .= $after;  
			
		} else {  // Default - output with link				

			if ( ( is_single() OR is_page() ) AND $single == false ) {
				$rel = 'rel="lightbox"';
				$href = false;  
			} else { 
				$href = get_permalink($id);
				$rel = '';
			}
			
			$title = 'title="' . get_the_title($id) .'"';
		
			$output .= $before; 
			if($href == false){
				$output .= $img_link;
			} else {
				$output .= '<a '.$title.' href="' . $href .'" '.$rel.'>' . $img_link . '</a>';
			}
			
			$output .= $after;  
		}	
	}
	elseif ( get_option('woo_resize') == 'true') { 
		
		foreach($src_arr as $key => $custom_field){
	
			// Clean the image URL
			$href = $custom_field; 		
			$custom_field = cleanSource( $custom_field );

			// Check if WPMU and set correct path
			if ( function_exists('get_current_site') ) {
				get_current_site();
				//global $blog_id; Breaks with WP3 MS
				if ( !$blog_id ) {
					global $current_blog;
					$blog_id = $current_blog->blog_id;				
				}
				if ( isset($blog_id) && $blog_id > 0 ) {
					$imageParts = explode( 'files/', $custom_field );
					if ( isset($imageParts[1]) ) 
						$custom_field = '/blogs.dir/' . $blog_id . '/files/' . $imageParts[1];
				}
			}
		
			//Set the ID to the Attachent's ID if it is an attachment
			if($is_auto_image == true){	
				$quick_id = $attachment_id[$key];
			} else {
			 	$quick_id = $id;
			}
			
			if($auto_meta == true) {
				$alt = 'alt="'. get_the_title($quick_id) .'"';
				$title = 'title="'. get_the_title($quick_id) .'"';
			}
			elseif($auto_meta == false) {
				$alt = 'alt="'. $meta.'"';
				$title = 'title="'. $meta .'"';
			}
			else {
				$alt = 'alt=""';
				$title = '';
			}
			
			$img_link = '<img src="'. get_bloginfo('template_url'). '/thumb.php?src='. $custom_field .'&amp;w='. $width .'&amp;h='. $height .'&amp;zc=1&amp;q='. $quality .'" '.$alt.' class="'. stripslashes($class) .'" '. $set_width . $set_height . ' />';
			
			if( $link == 'img' ) {  // Just output the image
				$output .= $before; 
				$output .= $img_link;
				$output .= $after;  
				
			} else {  // Default - output with link				

				if ( ( is_single() OR is_page() ) AND $single == false ) {
					$rel = 'rel="lightbox"';
				} else { 
					$href = get_permalink($id);
					$rel = '';
				}
			
				$output .= $before; 
				$output .= '<a '.$title.' href="' . $href .'" '.$rel.'>' . $img_link . '</a>';
				$output .= $after;  
			}
		}
		
	} else {  // Not Resize
		
		foreach($src_arr as $key => $custom_field){
		
			//Set the ID to the Attachent's ID if it is an attachment
			if($is_auto_image == true){	
				$quick_id = $attachment_id[$key];
			} else {
			 	$quick_id = $id;
			}
			
			if($auto_meta == true) {
				$alt = 'alt="'. get_the_title($quick_id) .'"';
				$title = 'title="'. get_the_title($quick_id) .'"';
			}
			elseif($auto_meta == false) {
				$alt = 'alt="'. $meta.'"';
				$title = 'title="'. $meta .'"';
			}
			else {
				$alt = 'alt=""';
				$title = '';
			}
		
			$img_link =  '<img src="'. $custom_field .'" '. $alt .' '. $set_width . $set_height . ' class="'. stripslashes($class) .'" />';
		
			if ( $link == 'img' ) {  // Just output the image 
				$output .= $before;                   
				$output .= $img_link; 
				$output .= $after;  
				
			} else {  // Default - output with link
			
				if ( ( is_single() OR is_page() ) AND $single == false ) { 
					$href = $custom_field;
					$rel = 'rel="lightbox"';
				} else { 
					$href = get_permalink($id);
					$rel = '';
				}
				 
				$output .= $before;   
				$output .= '<a '. $alt .' href="' . $href .'" '. $rel .'>' . $img_link . '</a>';
				$output .= $after;   
			}
		}
	}
	
	// Return or echo the output
	if ( $return == TRUE )
		return $output;
	else 
		echo $output; // Done  

}


/*-----------------------------------------------------------------------------------*/
/* Depreciated - woo_get_image - Get Image from custom field */
/*-----------------------------------------------------------------------------------*/

// Depreciated
function woo_get_image($key = 'image', $width = null, $height = null, $class = "thumbnail", $quality = 90,$id = null,$link = 'src',$repeat = 1,$offset = 0,$before = '', $after = '',$single = false, $force = false, $return = false) {
	// Run new function
	woo_image( 'key='.$key.'&width='.$width.'&height='.$height.'&class='.$class.'&quality='.$quality.'&id='.$id.'&link='.$link.'&repeat='.$repeat.'&offset='.$offset.'&before='.$before.'&after='.$after.'&single='.$single.'&fore='.$force.'&return='.$return );
	return;

}



/*-----------------------------------------------------------------------------------*/
/* woo_embed - Get Video embed code from custom field */
/*-----------------------------------------------------------------------------------*/

/*
Get Video
This function gets the embed code from the custom field
Parameters: 
        $key = Custom field key eg. "embed"
        $width = Set width manually without using $type
        $height = Set height manually without using $type
		$class = Custom class to apply to wrapping div
		$id = ID from post to pull custom field from
*/

function woo_embed($args) {

	//Defaults
	$key = 'embed';
	$width = null;
	$height = null;
	$class = 'video';
	$id = null;	
	
	if ( !is_array($args) ) 
		parse_str( $args, $args );
	
	extract($args);

  if(empty($id))
    {
    global $post;
    $id = $post->ID;
    } 
    

$custom_field = get_post_meta($id, $key, true);

if ($custom_field) : 

    $org_width = $width;
    $org_height = $height;
    
    // Get custom width and height
    $custom_width = get_post_meta($id, 'width', true);
    $custom_height = get_post_meta($id, 'height', true);    
    
    //Dynamic Height Calculation
    if ($org_height == '' && $org_width != '') {
    	$raw_values = explode(" ", $custom_field);
    
    	foreach ($raw_values as $raw) {
    		$embed_params = explode("=",$raw);
    		if ($embed_params[0] == 'width') {
   		 		$embed_width = ereg_replace("[^0-9]", "", $embed_params[1]);
    		}
    		elseif ($embed_params[0] == 'height') {
    			$embed_height = ereg_replace("[^0-9]", "", $embed_params[1]);
    		} 
    	}
    
    	$float_width = floatval($embed_width);
		$float_height = floatval($embed_height);
		$float_ratio = $float_height / $float_width;
		$calculated_height = intval($float_ratio * $width);
    }
    
    // Set values: width="XXX", height="XXX"
    if ( !$custom_width ) $width = 'width="'.$width.'"'; else $width = 'width="'.$custom_width.'"';
    if ( $height == '' ) { $height = 'height="'.$calculated_height.'"'; } else { if ( !$custom_height ) { $height = 'height="'.$height.'"'; } else { $height = 'height="'.$custom_height.'"'; } }
    $custom_field = stripslashes($custom_field);
    $custom_field = preg_replace( '/width="([0-9]*)"/' , $width , $custom_field );
    $custom_field = preg_replace( '/height="([0-9]*)"/' , $height , $custom_field );    

    // Set values: width:XXXpx, height:XXXpx
    if ( !$custom_width ) $width = 'width:'.$org_width.'px'; else $width = 'width:'.$custom_width.'px';
    if (  $height == '' ) { $height = 'height:'.$calculated_height.'px'; } else { if ( !$custom_height ) { $height = 'height:'.$org_height.'px'; } else { $height = 'height:'.$custom_height.'px'; } }
    $custom_field = stripslashes($custom_field);
    $custom_field = preg_replace( '/width:([0-9]*)px/' , $width , $custom_field );
    $custom_field = preg_replace( '/height:([0-9]*)px/' , $height , $custom_field );     

	// Suckerfish menu hack
	$custom_field = str_replace('<embed ','<param name="wmode" value="transparent"></param><embed wmode="transparent" ',$custom_field);

	$output = '';
    $output .= '<div class="'. $class .'">' . $custom_field . '</div>';
    
    return $output; 
	
else :

	return false;
    
endif;

}

/*-----------------------------------------------------------------------------------*/
/* Depreciated - woo_get_embed - Get Video embed code from custom field */
/*-----------------------------------------------------------------------------------*/

// Depreciated
function woo_get_embed($key = 'embed', $width, $height, $class = 'video', $id = null) {
	// Run new function
	return woo_embed( 'key='.$key.'&width='.$width.'&height='.$height.'&class='.$class.'&id='.$id );

}



/*-----------------------------------------------------------------------------------*/
/* Woo Show Page Menu */
/*-----------------------------------------------------------------------------------*/

// Show menu in header.php
// Exlude the pages from the slider
function woo_show_pagemenu( $exclude="" ) {
    // Split the featured pages from the options, and put in an array
    if ( get_option('woo_ex_featpages') ) {
        $menupages = get_option('woo_featpages');
        $exclude = $menupages . ',' . $exclude;
    }
    
    $pages = wp_list_pages('sort_column=menu_order&title_li=&echo=0&depth=1&exclude='.$exclude);
    $pages = preg_replace('%<a ([^>]+)>%U','<a $1><span>', $pages);
    $pages = str_replace('</a>','</span></a>', $pages);
    echo $pages;
}



/*-----------------------------------------------------------------------------------*/
/* Get the style path currently selected */
/*-----------------------------------------------------------------------------------*/
function woo_style_path() {
    $style = $_REQUEST[style];
    if ($style != '') {
        $style_path = $style;
    } else {
        $stylesheet = get_option('woo_alt_stylesheet');
        $style_path = str_replace(".css","",$stylesheet);
    }
    if ($style_path == "default")
      echo 'images';
    else
      echo 'styles/'.$style_path;
}



/*-----------------------------------------------------------------------------------*/
/* Get page ID */
/*-----------------------------------------------------------------------------------*/
function get_page_id($page_name){
    global $wpdb;
    $page_name = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE post_name = '".$page_name."' AND post_status = 'publish' AND post_type = 'page'");
    return $page_name;
}



/*-----------------------------------------------------------------------------------*/
/* Short Codes */
/*-----------------------------------------------------------------------------------*/
function woo_post_insert_shortcode($attr) {

    // Allow plugins/themes to override the default gallery template.
    $output = apply_filters('insert', '', $attr);
    if ( $output != '' )
        return $output;

    extract(shortcode_atts(array(
        'name'      => null,
        'id'         => null,
        'before'    => '',
        'after'     => ''
    ), $attr));

    $id = intval($id);
    
    global $wpdb;
    if($name == ''){
    $query = "SELECT post_content FROM $wpdb->posts WHERE id = $id";

    } 
    else
    {
       $query = "SELECT post_content FROM $wpdb->posts WHERE post_name = '$name'";   
    }
    
    $result = $wpdb->get_var($query);
    
    if(!empty($result)){
        $result = wpautop( $result, $br = 1 ); 
        return $before . $result . $after;
    }
    else
        return;

}

add_shortcode('insert', 'woo_post_insert_shortcode');  // use "[page]" in a post



/*-----------------------------------------------------------------------------------*/
/* Tidy up the image source url */
/*-----------------------------------------------------------------------------------*/
function cleanSource($src) {

	// remove slash from start of string
	if(strpos($src, "/") == 0) {
		$src = substr($src, -(strlen($src) - 1));
	}

	// Check if same domain so it doesn't strip external sites
	$host = str_replace('www.', '', $_SERVER['HTTP_HOST']);
	if ( !strpos($src,$host) )
		return $src;


	$regex = "/^((ht|f)tp(s|):\/\/)(www\.|)" . $host . "/i";
	$src = preg_replace ($regex, '', $src);
	$src = htmlentities ($src);
    
    // remove slash from start of string
    if (strpos($src, '/') === 0) {
        $src = substr ($src, -(strlen($src) - 1));
    }
	
	return $src;
}



/*-----------------------------------------------------------------------------------*/
/* Show image in RSS feed */
/* Original code by Justin Tadlock http://justintadlock.com */
/*-----------------------------------------------------------------------------------*/
if (get_option('woo_rss_thumb') == "true")
	add_filter('the_content', 'add_image_RSS');
	
function add_image_RSS( $content ) {
	
	global $post, $id;
	$blog_key = substr( md5( get_bloginfo('url') ), 0, 16 );
	if ( ! is_feed() ) return $content;

	// Get the "image" from custom field
	$image = get_post_meta($post->ID, 'image', $single = true);
	$image_width = '240';

	// If there's an image, display the image with the content
	if($image !== '') {
		$content = '<p style="float:right; margin:0 0 10px 15px; width:'.$image_width.'px;">
		<img src="'.$image.'" width="'.$image_width.'" />
		</p>' . $content;
		return $content;
	} 

	// If there's not an image, just display the content
	else {
		$content = $content;
		return $content;
	}
} 



/*-----------------------------------------------------------------------------------*/
/* Show analytics code in footer */
/*-----------------------------------------------------------------------------------*/
function woo_analytics(){
	$output = get_option('woo_google_analytics');
	if ( $output <> "" ) 
		echo stripslashes($output) . "\n";
}
add_action('wp_footer','woo_analytics');



/*-----------------------------------------------------------------------------------*/
/* Browser detection body_class() output */
/*-----------------------------------------------------------------------------------*/
add_filter('body_class','browser_body_class');
function browser_body_class($classes) {
	global $is_lynx, $is_gecko, $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome, $is_iphone;

	if($is_lynx) $classes[] = 'lynx';
	elseif($is_gecko) $classes[] = 'gecko';
	elseif($is_opera) $classes[] = 'opera';
	elseif($is_NS4) $classes[] = 'ns4';
	elseif($is_safari) $classes[] = 'safari';
	elseif($is_chrome) $classes[] = 'chrome';
	elseif($is_IE) $classes[] = 'ie';
	else $classes[] = 'unknown';

	if($is_iphone) $classes[] = 'iphone';
	return $classes;
}

/*-----------------------------------------------------------------------------------*/
/* Twitter's Blogger.js output for Twitter widgets */
/*-----------------------------------------------------------------------------------*/

function woo_twitter_script($unique_id,$username,$limit) {
?>
<script type="text/javascript">
<!--//--><![CDATA[//><!--

    function twitterCallback2(twitters) {
      var statusHTML = [];
      for (var i=0; i<twitters.length; i++){
        var username = twitters[i].user.screen_name;
        var status = twitters[i].text.replace(/((https?|s?ftp|ssh)\:\/\/[^"\s\<\>]*[^.,;'">\:\s\<\>\)\]\!])/g, function(url) {
          return '<a href="'+url+'">'+url+'</a>';
        }).replace(/\B@([_a-z0-9]+)/ig, function(reply) {
          return  reply.charAt(0)+'<a href="http://twitter.com/'+reply.substring(1)+'">'+reply.substring(1)+'</a>';
        });
        statusHTML.push('<li><span>'+status+'</span> <a style="font-size:85%" href="http://twitter.com/'+username+'/statuses/'+twitters[i].id+'">'+relative_time(twitters[i].created_at)+'</a></li>');
      }
      document.getElementById('twitter_update_list_<?php echo $unique_id; ?>').innerHTML = statusHTML.join('');
    }
    
    function relative_time(time_value) {
      var values = time_value.split(" ");
      time_value = values[1] + " " + values[2] + ", " + values[5] + " " + values[3];
      var parsed_date = Date.parse(time_value);
      var relative_to = (arguments.length > 1) ? arguments[1] : new Date();
      var delta = parseInt((relative_to.getTime() - parsed_date) / 1000);
      delta = delta + (relative_to.getTimezoneOffset() * 60);
    
      if (delta < 60) {
        return 'less than a minute ago';
      } else if(delta < 120) {
        return 'about a minute ago';
      } else if(delta < (60*60)) {
        return (parseInt(delta / 60)).toString() + ' minutes ago';
      } else if(delta < (120*60)) {
        return 'about an hour ago';
      } else if(delta < (24*60*60)) {
        return 'about ' + (parseInt(delta / 3600)).toString() + ' hours ago';
      } else if(delta < (48*60*60)) {
        return '1 day ago';
      } else {
        return (parseInt(delta / 86400)).toString() + ' days ago';
      }
    }
//-->!]]>
</script>
<script type="text/javascript" src="http://twitter.com/statuses/user_timeline/<?php echo $username; ?>.json?callback=twitterCallback2&amp;count=<?php echo $limit; ?>"></script>
<?php

}

/*-----------------------------------------------------------------------------------*/
/* Show Debug Outputs */
/*-----------------------------------------------------------------------------------*/

// Check if WooFramework Setting is set, if not then theme can output options
if ( get_option('framework_woo_show_options') <> "true" ) {

	if ( !isset($_REQUEST['options']) )
		$_REQUEST['options'] = ''; 	

	$options = $_REQUEST['options'];
	if ($options == 'woo') 
		add_action('wp_head', 'woo_show_options');
		
	if ($options == 'thumb') 
		add_action('wp_head', 'woo_thumb_debug');
}

function woo_show_options() {
	$options =  get_option('woo_template');      
    $return = woothemes_machine($options);
	echo '<link rel="stylesheet" type="text/css" href="'.get_bloginfo('template_directory').'/functions/admin-style.css" media="screen" />';
?>

<style type="text/css">
body { background:#fafafa !important; }
#content { padding:20px; border: 1px solid #D8D8D8; margin-bottom:20px; }
h1, h2, h3, h4, h5, h6  { margin: 0; font-family:Georgia, serif; color: #222; font-weight:normal; }
h1  {font-size: 22px; } h2  {font-size: 22px;} h3  {font-size: 18px;} h4  {font-size: 16px;} h5  {font-size: 14px;} h6  {font-size: 12px;}
#woo_container .group h2 { display:block; padding:15px 0 5px; font-style:italic; color:#555; font-size:24px;}
#woo_container #content .section h3.heading { font-family:Arial, Helvetica, sans-serif; font-size:14px; font-weight:bold; }
.button { display:none; }
</style>
</head>
<body>
    <div id="woo_container" class="custom">
    	<div id="content">
			<?php echo $return[0] ?>
        </div>
	</div>          
</body>
</html>
<?php

// Stop ouput
die;

}


function woo_thumb_debug(){
	$options =  get_option('woo_template');      
    $return = woothemes_machine($options);
	echo '<link rel="stylesheet" type="text/css" href="'.get_bloginfo('template_directory').'/functions/admin-style.css" media="screen" />';
?>

<style type="text/css">
	
body { background:#fafafa !important; }
#content { padding:20px; border: 1px solid #D8D8D8; margin-bottom:20px; }
h1, h2, h3, h4, h5, h6  { margin: 0; font-family:Georgia, serif; color: #222; font-weight:normal; }
h1  {font-size: 22px; } h2  {font-size: 22px;} h3  {font-size: 18px;} h4  {font-size: 16px;} h5  {font-size: 14px;} h6  {font-size: 12px;}
#woo_container .group h2 { display:block; padding:15px 0 5px; font-style:italic; color:#555; font-size:24px;}
#woo_container #content .section h3.heading { font-family:Arial, Helvetica, sans-serif; font-size:14px; font-weight:bold; }
.button { display:none; }
.green, .red, .orange { color: #000; font-size: 11px; display: block; float: right; margin: 10px 0; padding: 5px 10px;}
.green {  background: #AAFF7F; border:2px solid #8AFF4F;}
.red { background: #FF8F8F; border:2px solid #FF4F4F;}
.orange { background: #FFD07F; border:2px solid #FFB93F;}
.url { font-family: Courier,arial; font-size: 12px; background: #eee;}


</style>
</head>
<body>
    <div id="woo_container" class="custom">
    	<div id="content">
    	
			<div class="section section-info">
				<h3 class="heading">Thumb.php Debugger</h3>
				<div class="option">
					<div class="controls">
			 			Below is a full list of the elements needed to get you thumb.php image re-sizer working. Problem areas will be highlighted and information on how to solve them will be given where possible.
			 		</div>
					<div class="clear"></div>
				</div>
			</div>
			
			<div class="section">
				<h3 class="heading">1. Cache directory exists</h3>
				<div class="option">
					<?php
					$path = TEMPLATEPATH . '/cache';
					if(is_dir($path)){
						echo 'Found at <span class="url">'.$path.'</span>.';
						echo '<span class="green">Passed!</span>';
					} else {
						echo 'Directory (<span class="url">'.$path.'</span>) does not exist. Create it.';
						echo '<span class="red">Failed</span>';
					}
					?>
					<div class="clear"></div>
				</div>
			</div>
			
			<div class="section">
				<h3 class="heading">2. Cache folder permissions</h3>
				<div class="option">
			 			<?php 
			 			$path = TEMPLATEPATH . '/cache';
			 			$permission = substr(sprintf('%o', fileperms($path)), -4);
			 			if($permission){
			 				echo 'Permissions set to <strong>' . $permission .'</strong>.<br />';
			 				if($permission != '0777' AND $permission != '0755'){
			 					echo 'Put your theme\'s cache folder permissions to 0755 or 0777 at <span class="url">'.$path.'</span>.';
			 					echo '<span class="red">Failed</span>';
			 				} else {
			 					echo '<span class="green">Passed!</span>';
		 	 				}
		 	 			} else {
		 	 				echo 'There seems to be something wrong. Make sure the folder exists.';
		 	 				echo '<span class="red">Failed</span>';
		 	 			}
	
			 			?>
			 		
					<div class="clear"></div>
				</div>
			</div>
			<div class="section">
				<h3 class="heading">3. PHP GD Library (incomplete)</h3>
				<div class="option">
			 			<?php 
			 			if(function_exists('gd_info')){
			 				$info = gd_info();
			 				echo '<div style="display:none">'.print_r($info,true).'</div>';
			 				if(!empty($info)){
			 					echo 'GD Library found.';
			 					echo '<span class="green">Passed!</span>';
			 				} else { // Unlikely event.
			 					echo 'GD Library is missing.';
			 					echo '<span class="red">Failed</span>';
			 				}
			 			} else {
			 			
			 				echo 'GD Library check could not be performed. Extension might not be enabled. Contact Host.';
			 				echo '<span class="orange">?</span>';
			 				
			 			}
			 			?>
					<div class="clear"></div>
				</div>
			</div>
			
			<div class="section">
				<h3 class="heading">4. Mod_Security</h3>
				<div class="option">
						<?php 
						$url = get_option('sire_url') . '/?abc=../../'; // Random
						
						if (_iscurlinstalled()) {
						
							$handle = curl_init($url);
							curl_setopt($handle,  CURLOPT_RETURNTRANSFER, TRUE);
							/* Get the HTML or whatever is linked in $url. */
							$response = curl_exec($handle);
							/* Check for 404 (file not found). */
							$httpCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);
							if($httpCode == 404) {
							    $error = '404 Detected at: <span class="url">' . $url . ' ('.$httpCode.')</span>. Contact Host.';
							    $error .= '<span class="red">Failed</span>';
							} else {
								$error = 'Mod_security appears to be off. <span class="url">Code: ' . $httpCode .'</span>';
								$error .= '<span class="green">Passed!</span>';
							}
							curl_close($handle);
							echo $error;
							
						} else {
							if(function_exists('get_headers')){
								
								$response = get_headers($url, 1);
								
								if($response[0] == 'HTTP/1.1 404 Not Found'){
									$error = '404 Detected at: <span class="url">' . $url . ' ('.$response[0].')</span>. Contact Host.';
							    	$error .= '<span class="red">Failed</span>';
								} else {
									$error = 'Mod_security appears to be off. <span class="url">Code: ' . $response[0] .'</span>';
									$error .= '<span class="green">Passed!</span>';
								}
							} else { // ultimate fail
								$error = 'All checks failed. Status of mod_security could not be determined.';
							}
							echo $error;
						}
						
						?>
					<div class="clear"></div>
				</div>
			</div>
        </div>
	</div>          
</body>
</html>
<?php

// Stop ouput
die;
}


/*-----------------------------------------------------------------------------------*/
/* Template Detector */
/*-----------------------------------------------------------------------------------*/
function woo_active_template($filename = null){

	if(isset($filename)){
		
		global $wpdb;
		$query = "SELECT *,count(*) AS used FROM $wpdb->postmeta WHERE meta_key = '_wp_page_template' AND meta_value = '$filename' GROUP BY meta_value";
		$results = $wpdb->get_row($wpdb->prepare($query),'ARRAY_A'); // Select thrid coloumn accross
				
		if(empty($results))
			return false;
			
		$post_id = $results['post_id'];
		$trash = get_post_status($post_id); // Check for trash
		
		if($trash != 'trash')
			return true;
		else
	 		return false;
	
	} else {
		return false; // No $filename argument was set
	}

}
/*-----------------------------------------------------------------------------------*/
/* WooFramework Update Page */
/*-----------------------------------------------------------------------------------*/

function woothemes_framework_update_page(){
        $method = get_filesystem_method();
        $to = ABSPATH . 'wp-content/themes/' . get_option('template') . "/functions/";
        if(isset($_POST['password'])){
            
            $cred = $_POST;
            $filesystem = WP_Filesystem($cred);
            
        }
        elseif(isset($_POST['woo_ftp_cred'])){
            
             $cred = unserialize(base64_decode($_POST['woo_ftp_cred']));
             $filesystem = WP_Filesystem($cred);  
            
        } else {
            
           $filesystem = WP_Filesystem(); 
            
        };
        $url = admin_url('admin.php?page=woothemes_framework_update');
        ?>
            <div class="wrap themes-page">

            <?php
            if($filesystem == false){
                
            request_filesystem_credentials ( $url );
                
            }  else {
            ?>
            <h2>Framework Update</h2>
            <span style="display:none"><?php echo $method; ?></span>
            <form method="post"  enctype="multipart/form-data" id="wooform" action="<?php /* echo $url; */ ?>">
                <?php wp_nonce_field('update-options'); ?>
                <p>Welcome to the WooThemes Framework Updater. This updater will collect a file from the
                 WooThemes.com server, download and extract the files to your current theme's functions folder. </p>
                <p>This feature is still in <strong>beta</strong> mode, and is not recommended if you don't HAVE
                 to upgrade your framework or if you are already running a stable, working version.
                </p>
                <?php 
                $localversion = get_option('woo_framework_version');
                $remoteversion = woo_get_fw_version();
                ?>
                <p>&rarr; <strong>Your version:</strong> <?php echo $localversion; ?></p>
                
                <p>&rarr; <strong>Current Version:</strong> <?php echo $remoteversion; ?></p>
                
                <?php 
                $localversion = trim(str_replace('.','',$localversion));
                $remoteversion = trim(str_replace('.','',$remoteversion));

                if(strlen($localversion) == 2){$localversion = $localversion . '0'; }
                if(strlen($remoteversion) == 2){$remoteversion = $remoteversion . '0'; }

                if($localversion < $remoteversion) { ?>
                <input type="submit" value="Update Framework" />
                <?php } else { echo '<span style="background:#EFE577">No upgrade needed. You are already running the latest available version.</span>'; }?>
                <input type="hidden" name="woo_update_save" value="save" />
                <input type="hidden" name="woo_ftp_cred" value="<?php echo base64_encode(serialize($_POST)); ?>" />

            </form>
            <?php } ?>
            </div>
            <?php
};

/*-----------------------------------------------------------------------------------*/
/* WooFramework Update Head */
/*-----------------------------------------------------------------------------------*/

function woothemes_framework_update_head(){

  if(isset($_REQUEST['page'])){
	if($_REQUEST['page'] == 'woothemes_framework_update'){
              
		//Setup Filesystem 
		$method = get_filesystem_method(); 
		
		if(isset($_POST['woo_ftp_cred'])){ 
			 
			$cred = unserialize(base64_decode($_POST['woo_ftp_cred']));
			$filesystem = WP_Filesystem($cred);
			
		} else {
			
		   $filesystem = WP_Filesystem(); 
			
		};     
	
		if($filesystem == false && $_POST['upgrade'] != 'Proceed'){
			
			function woothemes_framework_update_filesystem_warning() {
					$method = get_filesystem_method();
					echo "<div id='filesystem-warning' class='updated fade'><p>Failed: Filesystem preventing downloads. (". $method .")</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_filesystem_warning');
				return;
		}
		if(isset($_REQUEST['woo_update_save'])){
		if($_REQUEST['woo_update_save'] == 'save'){
		
		$temp_file_addr = download_url('http://www.woothemes.com/updates/framework.zip');
		
		if ( is_wp_error($temp_file_addr) ) {
			
			$error = $temp_file_addr->get_error_code();
		
			if($error == 'http_no_url') {
			//The source file was not found or is invalid
				function woothemes_framework_update_missing_source_warning() {
					echo "<div id='source-warning' class='updated fade'><p>Failed: Invalid URL Provided</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_missing_source_warning');
			} else {
				function woothemes_framework_update_other_upload_warning() {
					echo "<div id='source-warning' class='updated fade'><p>Failed: Upload - $error</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_other_upload_warning');
				
			}
			
			return;
	
		  } 
		//Unzipp it
		global $wp_filesystem;
		$to = $wp_filesystem->wp_content_dir() . "/themes/" . get_option('template') . "/functions/";
		
		$dounzip = unzip_file($temp_file_addr, $to);
		
		unlink($temp_file_addr); // Delete Temp File
		
		if ( is_wp_error($dounzip) ) {
			
			//DEBUG
			$error = $dounzip->get_error_code();
			$data = $dounzip->get_error_data($error);
			//echo $error. ' - ';
			//print_r($data);
							
			if($error == 'incompatible_archive') {
				//The source file was not found or is invalid
				function woothemes_framework_update_no_archive_warning() {
					echo "<div id='woo-no-archive-warning' class='updated fade'><p>Failed: Incompatible archive</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_no_archive_warning');
			} 
			if($error == 'empty_archive') {
				function woothemes_framework_update_empty_archive_warning() {
					echo "<div id='woo-empty-archive-warning' class='updated fade'><p>Failed: Empty Archive</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_empty_archive_warning');
			}
			if($error == 'mkdir_failed') {
				function woothemes_framework_update_mkdir_warning() {
					echo "<div id='woo-mkdir-warning' class='updated fade'><p>Failed: mkdir Failure</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_mkdir_warning');
			}  
			if($error == 'copy_failed') {
				function woothemes_framework_update_copy_fail_warning() {
					echo "<div id='woo-copy-fail-warning' class='updated fade'><p>Failed: Copy Failed</p></div>";
				}
				add_action('admin_notices', 'woothemes_framework_update_copy_fail_warning');
			}
				
			return;
	
		} 
		
		function woothemes_framework_updated_success() {
			echo "<div id='framework-upgraded' class='updated fade'><p>New framework successfully downloaded, extracted and updated.</p></div>";
		}
		add_action('admin_notices', 'woothemes_framework_updated_success');
		
		}
	}
	} //End user input save part of the update
 }
}
                             
add_action('admin_head','woothemes_framework_update_head');

/*-----------------------------------------------------------------------------------*/
/* WooFramework Version Getter */
/*-----------------------------------------------------------------------------------*/

function woo_get_fw_version($url = ''){
	
	if(!empty($url)){
		$fw_url = $url;
	} else {
    	$fw_url = 'http://www.woothemes.com/updates/functions-changelog.txt';
    }
    
    //echo $fw_url;
    $file_contents = file($fw_url);
    
    if($file_contents) {
        foreach ($file_contents as $line_num => $line) {
                            
                $current_line =  $line;
                
                if($line_num > 1){    // Not the first or second... dodgy :P
                    
                    if (preg_match('/^[0-9]/', $line)) {
                                            
                            $current_line = stristr($current_line,"version");
                            $current_line = preg_replace('~[^0-9,.]~','',$current_line);
                            $output = $current_line;
                            break;
                    }
                }     
        }
        return $output;
        
    } else {
        return 'Currently Unavailable';
    }

}

/*-----------------------------------------------------------------------------------*/
/* Woo URL shortener */
/*-----------------------------------------------------------------------------------*/

function woo_short_url($url) {
	$service = get_option('woo_url_shorten');
	$bitlyapilogin = get_option('woo_bitly_api_login');;
	$bitlyapikey = get_option('woo_bitly_api_key');;
	if (isset($service)) {
		switch ($service) 
		{
    		case 'TinyURL':
    			$shorturl = getTinyUrl($url);
    			break;
    		case 'Bit.ly':
    			if (isset($bitlyapilogin) && isset($bitlyapikey) && ($bitlyapilogin != '') && ($bitlyapikey != '')) {
    				$shorturl = make_bitly_url($url,$bitlyapilogin,$bitlyapikey,'json');
    			}
    			else {
    				$shorturl = getTinyUrl($url);
    			}
    			break;
    		case 'Off':
    			$shorturl = $url;
    			break;
    		default:
    			$shorturl = $url;
    			break;
    	}
	}
	else {
		$shorturl = $url;
	}
	return $shorturl;
}

//TinyURL
function getTinyUrl($url) {
	$tinyurl = file_get_contents_curl("http://tinyurl.com/api-create.php?url=".$url);
	return $tinyurl;
}

//Bit.ly
function make_bitly_url($url,$login,$appkey,$format = 'xml',$version = '2.0.1')
{
	//create the URL
	$bitly = 'http://api.bit.ly/shorten?version='.$version.'&longUrl='.urlencode($url).'&login='.$login.'&apiKey='.$appkey.'&format='.$format;
	
	//get the url
	//could also use cURL here
	$response = file_get_contents_curl($bitly);
	
	//parse depending on desired format
	if(strtolower($format) == 'json')
	{
		$json = @json_decode($response,true);
		return $json['results'][$url]['shortUrl'];
	}
	else //xml
	{
		$xml = simplexml_load_string($response);
		return 'http://bit.ly/'.$xml->results->nodeKeyVal->hash;
	}
}

//Alternative CURL function
function file_get_contents_curl($url) {
	if (_iscurlinstalled()) {
		$ch = curl_init();
	
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //Set curl to return the data instead of printing it to the browser.
		curl_setopt($ch, CURLOPT_URL, $url);
	
		$data = curl_exec($ch);
		
		if ($data === FALSE) {
			$data =  "cURL Error: " . curl_error($ch);
		}
	
		curl_close($ch);
	} else {
		$data = $url;
	}
	return $data;
}

// Checks for presence of the cURL extension.
function _iscurlinstalled() {
	if  (in_array  ('curl', get_loaded_extensions())) {
		if (function_exists('curl_init')) {
			return true;
		} else {
			return false;
		}
	}
	else{
		if (function_exists('curl_init')) {
			return true;
		} else {
			return false;
		}
	}
}

/*-----------------------------------------------------------------------------------*/
/* woo_title() */
/*-----------------------------------------------------------------------------------*/

function woo_title(){

	global $post;
	
	//3rd Party Plugins
	if(get_option('seo_woo_use_third_party_data') == 'true'){
		$use_third_party_data = true;
	}
		
	if(	(class_exists('All_in_One_SEO_Pack') OR class_exists('Headspace_Plugin')) AND 
		( $third_party_data != true )) { wp_title(); return; }

	$sep = get_option('seo_woo_seperator');	
	if(empty($sep)) { $sep = " | ";} else { $sep = ' ' . $sep . ' ';}
	$use_wp_title = get_option('seo_woo_wp_title');
	$home_layout = get_option('seo_woo_home_layout');
	$single_layout = get_option('seo_woo_single_layout');
	$page_layout = get_option('seo_woo_page_layout');
	$archive_layout = get_option('seo_woo_archive_layout');
	
	
	$output = '';
	if($use_wp_title == 'true'){
		
		if(is_home() OR is_front_page()){
			switch ($home_layout){
				case 'a': $output = get_bloginfo('name') . $sep . get_bloginfo('description'); 
				break;
				case 'b': $output = get_bloginfo('name'); 
				break;
				case 'c': $output = get_bloginfo('description'); 
				break;
				}
			if(is_paged()){
				$paged_var = get_query_var('paged');
				if(get_option('seo_woo_paged_var_pos') == 'after'){
				
					$output .= $sep . get_option('seo_woo_paged_var') . ' ' . $paged_var;

				} else {
									
					$output = get_option('seo_woo_paged_var') . ' ' . $paged_var . $sep . $output;

				}
				
			}
			echo $output;
		}
		else {
		if (is_single()) { $layout = $single_layout; }
		elseif  (is_page()) { $layout = $page_layout; }
		elseif  (is_archive()) { $layout = $archive_layout; }
		elseif  (is_search()) { $layout = 'search'; }
		elseif  (is_404()) { $layout = $single_layout; }
		
		//Check if there is a custom value added to post meta
		$wooseo_title = get_post_meta($post->ID,'seo_title',true); //WooSEO
		$aio_title = get_post_meta($post->ID,'_aioseop_title',true); //All-in-One SEO
		$headspace_title = get_post_meta($post->ID,'_headspace_page_title',true); //Headspace SEO
		
		if(get_option('seo_woo_wp_custom_field_title')!= 'true'){
			if(!empty($wooseo_title)){
				$layout = 'wooseo';
			} elseif(!empty($aio_title) AND $use_third_party_data) {
				$layout = 'aioseo';
			} elseif(!empty($headspace_title) AND $use_third_party_data) {
				$layout = 'headspace';
			}
		}

			switch ($layout){
				case 'a': $output = wp_title($sep,false,true) . get_bloginfo('name');
				break;
				case 'b': $output = wp_title('',false,false);
				break;
				case 'c': $output = get_bloginfo('name') . wp_title($sep,false,false);
				break;
				case 'd': $output = wp_title($sep,false,true) . get_bloginfo('description');
				break;
				case 'e': $output = get_bloginfo('name') . $sep . wp_title($sep,false,true) . get_bloginfo('description');
				break;
				case 'search':  $output = get_bloginfo('name') . wp_title($sep,false,false); // Search is hardcoded
				break;
				case 'wooseo':  $output = $wooseo_title; // WooSEO Title
				break;
				case 'aioseo':  $output = $aio_title; // All-in-One Title
				break;
				case 'headspace':  $output = $headspace_title; // Headspace Title
				break;
			}
			if(is_paged()){
				$paged_var = get_query_var('paged');
				if(get_option('seo_woo_paged_var_pos') == 'after'){
					$output .= $sep . get_option('seo_woo_paged_var') . ' ' . $paged_var;
				} else {
					$output = get_option('seo_woo_paged_var') . ' ' . $paged_var . $sep . $output;
				}
			}
			echo $output;
		}
	}
	else {

		if ( is_home() ) { echo get_bloginfo('name') . $sep . get_bloginfo('description'); } 
		elseif ( is_search() ) { echo get_bloginfo('name') . $sep . __('Search Results', 'woothemes');  }  
		elseif ( is_author() ) { echo get_bloginfo('name') . $sep . __('Author Archives', 'woothemes');  }  
		elseif ( is_single() ) { echo wp_title($sep,true,true) . get_bloginfo('name');  }
		elseif ( is_page() ) {  echo get_bloginfo('name'); wp_title($sep,true,false);  }
		elseif ( is_category() ) { echo get_bloginfo('name') . $sep . __('Category Archive', 'woothemes') . $sep . single_cat_title('',false);  }  
		elseif ( is_month() ) { echo get_bloginfo('name') . $sep . __('Monthly Archive', 'woothemes') . $sep . get_the_time('F');  }
		elseif ( is_year() ) { echo get_bloginfo('name') . $sep . __('Yearly Archive', 'woothemes') . $sep . get_the_time('Y');  }
		elseif ( is_tag() ) {  echo get_bloginfo('name') . $sep . __('Tag Archive', 'woothemes') . $sep . single_tag_title('',false); }
	
	}
}

/*-----------------------------------------------------------------------------------*/
/* woo_meta() */
/*-----------------------------------------------------------------------------------*/


function woo_meta(){
		global $post;
		global $wpdb;
		if(!empty($post)){
			$post_id = $post->ID;
		}
		
		// Basic Output
		echo '<meta http-equiv="Content-Type" content="'. get_bloginfo('html_type') .'; charset='. get_bloginfo('charset') .'" />' . "\n";
		
		// Under SETTIGNS > PRIVACY in the WordPress backend
		if ( get_option('blog_public') == 0 ) { return; }
		
		//3rd Party Plugins
		if(get_option('seo_woo_use_third_party_data') == 'true'){
			$use_third_party_data = true;
		}
		
		if(	(class_exists('All_in_One_SEO_Pack') OR class_exists('Headspace_Plugin')) AND 
		( $use_third_party_data == true )) { return; }
		
		// Robots
		$index = 'index';
		$follow = 'follow';

		if ( is_category() && get_option('seo_woo_meta_category') != 'true' ) { $index = 'noindex'; }  
		elseif ( is_tag() && get_option('seo_woo_meta_tag') != 'true') { $index = 'noindex'; }
		elseif ( is_search() && get_option('seo_woo_meta_search') != 'true' ) { $index = 'noindex'; }  
		elseif ( is_author() && get_option('seo_woo_meta_author') != 'true') { $index = 'noindex'; }  
		elseif ( is_archive() && get_option('seo_woo_meta_archive') != 'true') { $index = 'noindex'; }
	
		if(is_singular() && get_post_meta($post->ID,'seo_follow',true) != 'true') { $follow = 'nofollow';  }
		if(get_option('seo_woo_meta_single_follow') == 'true') { $follow = 'follow'; }

		
	
		echo '<meta name="robots" content="'. $index .', '. $follow .'" />' . "\n";
		
		/* Description */
		$description = '';
		
		$home_desc_option = get_option('seo_woo_meta_home_desc');
		$singular_desc_option = get_option('seo_woo_meta_single_desc');
		
		//Check if there is a custom value added to post meta
		$wooseo_desc = get_post_meta($post->ID,'seo_description',true); //WooSEO
		$aio_desc = get_post_meta($post->ID,'_aioseop_description',true); //All-in-One SEO
		$headspace_desc = get_post_meta($post->ID,'_headspace_description',true); //Headspace SEO
	
		//Singular setup
		if(!empty($aio_desc) AND $use_third_party_data) {
			$singular_desc_option = 'aioseo';
		} elseif(!empty($headspace_desc) AND $use_third_party_data) {
			$singular_desc_option = 'headspace';
		}

		
		if(is_home() OR is_front_page()){
			switch($home_desc_option){
				case 'a': $description = '';
				break;
				case 'b': $description = get_bloginfo('description');
				break;
				case 'c': $description = get_option('seo_woo_meta_home_desc_custom');
				break;
			}
		}
		elseif(is_singular()){
			
			switch($singular_desc_option){
				case 'a': $description = '';
				break;
				case 'b': $description = trim(strip_tags($wooseo_desc));
; // WooSEO Title
				break; 
				case 'c': 
	
    				$data = $wpdb->get_results("SELECT * FROM $wpdb->posts WHERE ID=$post_id");
					$post_content =  $data[0]->post_excerpt;
					if(empty($post_content)){
						$post_content = $data[0]->post_content;
						$post_content = htmlentities(trim(strip_tags(strip_shortcodes($post_content))));
					} else {
						$post_content = htmlentities(trim(strip_tags(strip_shortcodes($post_content))));
					}			
					$description = woo_text_trim($post_content,30);
				break;
				case 'aioseo':  $description = $aio_desc; // All-in-One Title
				break;
				case 'headspace':  $description = $headspace_desc; // Headspace Title
				break;
				
			}			
		}
		
		if(empty($description) AND get_option('seo_woo_meta_single_desc_sitewide') == 'true'){
			$description = get_option('seo_woo_meta_single_desc_custom');
		}
		
		$description = htmlspecialchars($description, ENT_QUOTES, 'UTF-8');
		
		if(!empty($description)){
			echo '<meta name="description" content="'.$description.'" />' . "\n";
		}
		
		/* Keywords */
		$keywords = '';
		
		$home_key_option = get_option('seo_woo_meta_home_key');
		$singular_key_option = get_option('seo_woo_meta_single_key');
		
		//Check if there is a custom value added to post meta
		$wooseo_keywords = get_post_meta($post->ID,'seo_keywords',true); //WooSEO
		$aio_keywords = get_post_meta($post->ID,'_aioseop_keywords',true); //All-in-One SEO
		$headspace_keywords = get_post_meta($post->ID,'_headspace_keywords',true); //Headspace SEO
		
		//Singular setup
		
		if(!empty($aio_keywords) AND $use_third_party_data) {
			$singular_key_option = 'aioseo';
		} elseif(!empty($headspace_keywords) AND $use_third_party_data) {
			$singular_key_option = 'headspace';
		}	
			
		if(is_home() OR is_front_page()){
			switch($home_key_option){
				case 'a': $keywords = '';
				break;
				case 'c': $keywords = get_option('seo_woo_meta_home_key_custom');
				break;
			}
		}
		elseif(is_singular()){
			
			switch($singular_key_option){
				case 'a': $keywords = '';
				break;
				case 'b': $keywords = $wooseo_keywords;
				break;
				case 'c': 
					
					$the_keywords = array(); 
					//Tags
					if(get_the_tags($post->ID)){ 
						foreach(get_the_tags($post->ID) as $tag) {
							$tag_name = $tag->name; 
							$the_keywords[] = strtolower($tag_name);
						}
					}
					//Cats
					if(get_the_category($post->ID)){ 
						foreach(get_the_category($post->ID) as $cat) {
							$cat_name = $cat->name; 
							$the_keywords[] = strtolower($cat_name);
						}
					}
					
					$keywords = implode(",",$the_keywords);
				break;
				case 'aioseo':  $keywords = $aio_keywords; // All-in-One Title
				break;
				case 'headspace':  $keywords = $headspace_keywords; // Headspace Title
				break;
				}
		}
		
		if(empty($keywords) AND get_option('seo_woo_meta_single_key_sitewide') == 'true'){
			$keywords = get_option('seo_woo_meta_single_key_custom');
		}
		
		$keywords = htmlspecialchars($keywords, ENT_QUOTES, 'UTF-8');
		
		if(!empty($keywords)){
			echo '<meta name="keywords" content="'.$keywords.'" />' . "\n";
		}
		
}


//Add Post Custom Settings
add_action('admin_head','seo_add_custom');
		
function seo_add_custom() {

		$seo_template = array();
		
		$seo_template[] = array (	"name"  => "seo_follow",
										"std" => "false",
										"label" => "SEO - Remove Nofollow",
										"type" => "checkbox",
										"desc" => "Make link from this post/page followable by search engines.");

		$seo_template[] = array (	"name"  => "seo_title",
										"std" => "",
										"label" => "SEO - Custom Page Title",
										"type" => "text",
										"desc" => "Add a custom title for this post/page.");
										
		$seo_template[] = array (	"name"  => "seo_description",
										"std" => "",
										"label" => "SEO - Custom Description",
										"type" => "textarea",
										"desc" => "Add a custom meta description for this post/page.");
										
		$seo_template[] = array (	"name"  => "seo_keywords",
										"std" => "",
										"label" => "SEO - Custom Keywords",
										"type" => "text",
										"desc" => "Add a custom meta keywords for this post/page. (comma seperated)");	
							
		//3rd Party Plugins
		if(get_option('seo_woo_use_third_party_data') == 'true'){
			$use_third_party_data = true;
		}
		
		if(	(class_exists('All_in_One_SEO_Pack') OR class_exists('Headspace_Plugin')) AND 
		( $use_third_party_data == true )) { 
			delete_option('woo_custom_seo_template'); 
		}
		else {
			update_option('woo_custom_seo_template',$seo_template);	
		}	

}

/*-----------------------------------------------------------------------------------*/
/* Woo Text Trimmer */
/*-----------------------------------------------------------------------------------*/

function woo_text_trim($text, $words = 50)
{ 
	$matches = preg_split("/\s+/", $text, $words + 1);
	$sz = count($matches);
	if ($sz > $words) 
	{
		unset($matches[$sz-1]);
		return implode(' ',$matches)." ...";
	}
	return $text;
}


/*-----------------------------------------------------------------------------------*/
/* THE END */
/*-----------------------------------------------------------------------------------*/
?>